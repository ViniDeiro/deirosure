#!/usr/bin/env python3
"""
Script de demonstra√ß√£o do sistema de surebet
Mostra exemplos pr√°ticos de como usar o sistema
"""

import json
import time
from typing import Dict, List
from scraping import buscar_todas_odds
from surebet import encontrar_surebets, calcular_stakes, calcular_lucro_esperado, projetar_banca

def print_header(titulo: str):
    """Imprime um cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üéØ {titulo}")
    print("="*60)

def print_section(titulo: str):
    """Imprime uma se√ß√£o formatada"""
    print(f"\nüìã {titulo}")
    print("-"*40)

def demonstrar_busca_odds():
    """Demonstra a busca de odds"""
    print_section("Buscando odds das casas de apostas...")
    
    odds = buscar_todas_odds()
    
    print("üè† Casas monitoradas:")
    for casa, jogos in odds.items():
        print(f"  ‚úÖ {casa.upper()}: {len(jogos)} jogos dispon√≠veis")
        
        if jogos:
            print(f"     üìå Exemplo: {jogos[0]['evento']}")
            for time, odd in jogos[0]['odds'].items():
                print(f"        {time}: {odd}")
    
    return odds

def demonstrar_deteccao_surebets(odds: Dict):
    """Demonstra a detec√ß√£o de surebets"""
    print_section("Detectando oportunidades de surebet...")
    
    total_surebets = 0
    melhores_oportunidades = []
    
    casas = list(odds.keys())
    
    for i in range(len(casas)):
        for j in range(i + 1, len(casas)):
            casa1, casa2 = casas[i], casas[j]
            odds1, odds2 = odds[casa1], odds[casa2]
            
            print(f"\nüîç Comparando {casa1.upper()} vs {casa2.upper()}...")
            
            surebets = encontrar_surebets(odds1, odds2)
            
            if surebets:
                total_surebets += len(surebets)
                melhores_oportunidades.extend(surebets)
                
                for sb in surebets:
                    print(f"  üéØ SUREBET ENCONTRADA!")
                    print(f"     Evento: {sb['evento']}")
                    print(f"     {sb['casa1']}: {sb['resultado1']} @ {sb['odd1']}")
                    print(f"     {sb['casa2']}: {sb['resultado2']} @ {sb['odd2']}")
                    print(f"     üí∞ Lucro garantido: {sb['lucro_percentual']:.2f}%")
            else:
                print(f"  ‚ùå Nenhuma surebet encontrada")
    
    print(f"\nüìä RESUMO: {total_surebets} surebets encontradas!")
    
    # Ordena por lucro decrescente
    melhores_oportunidades.sort(key=lambda x: x['lucro_percentual'], reverse=True)
    
    return melhores_oportunidades

def demonstrar_calculo_stakes(surebets: List, banca: float = 1000):
    """Demonstra o c√°lculo de stakes"""
    print_section(f"Calculando stakes para banca de R$ {banca}")
    
    if not surebets:
        print("‚ùå Nenhuma surebet dispon√≠vel para calcular stakes")
        return
    
    melhor_surebet = surebets[0]
    
    print(f"üèÜ MELHOR OPORTUNIDADE:")
    print(f"   Evento: {melhor_surebet['evento']}")
    print(f"   Lucro esperado: {melhor_surebet['lucro_percentual']:.2f}%")
    print()
    
    stake1, stake2 = calcular_stakes(banca, melhor_surebet['odd1'], melhor_surebet['odd2'])
    lucros = calcular_lucro_esperado(stake1, melhor_surebet['odd1'], stake2, melhor_surebet['odd2'])
    
    print(f"üí∞ DISTRIBUI√á√ÉO DA BANCA:")
    print(f"   Apostar R$ {stake1:.2f} em {melhor_surebet['resultado1']} na {melhor_surebet['casa1']}")
    print(f"   Apostar R$ {stake2:.2f} em {melhor_surebet['resultado2']} na {melhor_surebet['casa2']}")
    print(f"   Total investido: R$ {stake1 + stake2:.2f}")
    print()
    
    print(f"üéØ LUCROS GARANTIDOS:")
    print(f"   Se {melhor_surebet['resultado1']} ganhar: R$ {lucros['lucro_resultado1']:.2f}")
    print(f"   Se {melhor_surebet['resultado2']} ganhar: R$ {lucros['lucro_resultado2']:.2f}")
    print(f"   Lucro m√©dio garantido: R$ {lucros['lucro_medio']:.2f}")
    print(f"   ROI: {(lucros['lucro_medio'] / banca) * 100:.2f}%")

def demonstrar_projecoes():
    """Demonstra c√°lculos de proje√ß√£o"""
    print_section("Calculando proje√ß√µes de crescimento...")
    
    cenarios = [
        (1000, 2000, 30, "Conservador"),
        (1000, 3000, 30, "Moderado"), 
        (1000, 5000, 30, "Agressivo")
    ]
    
    for banca_inicial, banca_final, dias, tipo in cenarios:
        retorno_diario = projetar_banca(banca_inicial, banca_final, dias)
        lucro_total = banca_final - banca_inicial
        roi_total = (lucro_total / banca_inicial) * 100
        
        print(f"\nüìà CEN√ÅRIO {tipo.upper()}:")
        print(f"   De R$ {banca_inicial} para R$ {banca_final} em {dias} dias")
        print(f"   Retorno di√°rio necess√°rio: {retorno_diario * 100:.3f}%")
        print(f"   Lucro total: R$ {lucro_total}")
        print(f"   ROI total: {roi_total:.1f}%")

def demonstrar_relatorio_completo():
    """Gera um relat√≥rio completo"""
    print_section("Gerando relat√≥rio completo...")
    
    # Busca todas as odds
    odds = buscar_todas_odds()
    
    # Conta jogos
    total_jogos = sum(len(jogos) for jogos in odds.values())
    
    # Busca surebets
    all_surebets = []
    casas = list(odds.keys())
    
    for i in range(len(casas)):
        for j in range(i + 1, len(casas)):
            casa1, casa2 = casas[i], casas[j]
            odds1, odds2 = odds[casa1], odds[casa2]
            surebets = encontrar_surebets(odds1, odds2)
            all_surebets.extend(surebets)
    
    all_surebets.sort(key=lambda x: x['lucro_percentual'], reverse=True)
    
    print(f"üìä ESTAT√çSTICAS GERAIS:")
    print(f"   Casas monitoradas: {len(odds)}")
    print(f"   Total de jogos: {total_jogos}")
    print(f"   Surebets encontradas: {len(all_surebets)}")
    
    if all_surebets:
        melhor_lucro = all_surebets[0]['lucro_percentual']
        lucro_medio = sum(sb['lucro_percentual'] for sb in all_surebets) / len(all_surebets)
        
        print(f"   Melhor oportunidade: {melhor_lucro:.2f}%")
        print(f"   Lucro m√©dio: {lucro_medio:.2f}%")
        
        print(f"\nüèÜ TOP 3 OPORTUNIDADES:")
        for i, sb in enumerate(all_surebets[:3], 1):
            print(f"   {i}. {sb['evento']} - {sb['lucro_percentual']:.2f}%")
    
    return all_surebets

def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print_header("DEMONSTRA√á√ÉO DO SISTEMA SUREBET v2.0")
    
    print("üéÆ Esta demonstra√ß√£o mostrar√°:")
    print("   ‚úÖ Busca de odds em m√∫ltiplas casas")
    print("   ‚úÖ Detec√ß√£o autom√°tica de surebets")
    print("   ‚úÖ C√°lculo de stakes otimizados")
    print("   ‚úÖ Proje√ß√µes de crescimento de banca")
    print("   ‚úÖ Relat√≥rio completo")
    
    input("\nüöÄ Pressione ENTER para come√ßar...")
    
    try:
        # 1. Buscar odds
        odds = demonstrar_busca_odds()
        
        # 2. Detectar surebets
        surebets = demonstrar_deteccao_surebets(odds)
        
        # 3. Calcular stakes
        demonstrar_calculo_stakes(surebets, 1000)
        
        # 4. Proje√ß√µes
        demonstrar_projecoes()
        
        # 5. Relat√≥rio completo
        relatorio = demonstrar_relatorio_completo()
        
        print_header("DEMONSTRA√á√ÉO CONCLU√çDA")
        print("‚úÖ Sistema testado com sucesso!")
        print("üåê API dispon√≠vel em: http://localhost:8000")
        print("üìñ Documenta√ß√£o em: http://localhost:8000/docs")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   1. Configure scraping real das casas")
        print("   2. Implemente notifica√ß√µes autom√°ticas")
        print("   3. Adicione mais casas de apostas")
        print("   4. Configure alertas por ROI m√≠nimo")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a demonstra√ß√£o: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()